LPIC1 学習メモ

〜〜〜システムアーキテクチャ〜〜〜
◆ハードウェア設定の決定と設定

・D-Bus(Desktop Bus) => プログラム同士が情報伝達するプロセス間通信機構
・デバイス =>コールドプラグデバイス・ホットプラグデバイス
-- コールドプラグデバイス => システム停止状態のみデバイスの差し替えが可能、例：ネットワークカード(NIC)
-- ホットプラグデバイス => システム起動時もデバイスの差し替えが可能(プラグアンドプレイデバイスとも言う)、例：USB・PCカード(PCMCIA)・IEEE1394
--- ホットプラグデバイスの制御はudevでおこなれる。
カーネルがデバイス検知すると、/sysの情報更新、この更新をudevが検知し、/devにデバイスファイルを動的に作成。デバイスファイル作成時は/etc/udev/rules.dに配置された設定ファイル[.rules]の情報に基づいておこなれる。

・大容量記憶媒体
- HDD(Hard Disk Drive) => 容量大、コスパ高い、データ記録に磁気、内臓と外付け有り、プラッタ(回転円盤にデータ読み書き)、プラッタが傷つきデータ破損可能性有

・USBフラッシュドライブ(USBメモリ) => フラッシュメモリ(不揮発性の半導体メモリ)にデータ読書き、小型で軽量、フラッシュメモリには書き換え回数・データ保持期間に制限があり、長期保存に向いてない

・SSD(Solid State Drive) => 半導体メモリ、フラッシュメモリ長期保存に向かない、ランダムアクセス性能、省電力・静音・非接触メディアで耐振動・衝撃性高い、HDDの代わりに使用されることもある、
フラッシュメモリの高速性を引き出す為、SATAより高速な「NVMe」インフーフェースで接続するタイプもある

・USBデバイスのデバイスクラス => クラスドライバ・汎用ドライバ
- HID(Human INterface Device): キーボード・マウス・ジョイスティック
- Mass Storage Class: ハードディスク・USBメモリー
- ACM Communication Device Class: モデム・TA(ターミナルアダプタ)
- Audio Class: スピーカー・マイク

・カーネルモジュール => カーネルで扱う独立した部品。モジュールとしてカーネルから切り離すことができ、カーネル本体のサイズを小さくし、必要な機能だけロード、不要な機能はアンロードできる
- modprobe:依存関係を考慮してカーネルモジュールをロード・アンロードするコマンド、設定ファイルは「/etc/modprobe.d」配下の.confファイル(カーネル2.4までは「/etc/modules.conf」)
-- modprobeの設定ファイルの主な設定
--- options: 各カーネルモジュールのデフォルトパラメータ指定
--- alias: カーネルモジュールに別名をつける
--- install: 特定のカーネルモジュールのロード時に実行するコマンド指定
--- remove: 特定のカーネルモジュールのアンロード時に実行するコマンド指定
--- blacklist: ロードしたくないカーネルモジュールを指定

- lsmod: ロードされているカーネルモジュールに関する情報表示コマンド
- lspic: PCIデバイスに関する情報表示コマンド
- lsusb: USBデバイス情報表示コマンド

・/proc => プロセス・ハードウェア、システムリソースを扱う為の仮想的ファイルシステム、システム起動時にメモリ上に作成
- interrupts: IRQ情報
- ioports: I/Oアドレス情報
- bus/pci/devices: PCIデバイス情報
- bus/usb/devices: USBデバイス情報
- meminfo: メモリ情報
- cpuinfo: CPU情報
- dma: 使用中のDMAチャンネル情報
- modules: ロードされているカーネルモジュール情報
- scsi/scsi: SCSIデバイス情報
「/proc」配下格納ファイルの多くはASCIIテキスト形式、catコマンドで確認可能

・ DMA => CPUを介すことなくメインメモリと周辺機器の間で直接情報転送する方式
DMAチャネルはDMAコントローラ(制御装置)に対して情報転送要求する為に使用する通信経路

・PCI => PCIバスに接続されたデバイス、PICデバイスにはネットワークカード(NIC)やSCSIカードなどがある
lspci -v => 詳細表示 (-vv でさらに詳細も可能)
- lspciコマンドの実行結果の情報
❶ PCI識別番号
❷ PCIデバイスの種類
❸ ベンダー名(ベンダーID)
❹ デバイス名
❺ バスの速度(詳細表示のみ)
❻ IRQ番号(詳細表示のみ)
❼ I/Oポートアドレス(詳細表示のみ)

・IRQ => デバイスからCPUへの割り込み要求
・I/Oポートアドレス => デバイスとCPUがデータをやりとりするする際に使用する16ビットアドレス

・BIOS(Basic I/O System) => ハードウェアに近い部分を司るシステム、マザーボード上に書き込まれる。CPに電源を入れるとまずBIOSが起動し、周辺機器を制御する
- CP起動時に(DEL・F2など)で呼び出せるBIOS/UEFIセットアップ画面の設定
-- 日付と時刻
-- 電源管理
-- 起動デバイスの優先順位
-- 組み込みデバイスの有効/無効化

----------
◆システムの起動

・BIOS(Basic Input Output System)が古い場合、HDDを正常に認識できず、小容量になる場合がある。=> BIOSをアップデートすることで問題が解決する
- PC起動後、BIOSが起動、HDDの最低限の認識、起動デバイスの優先順位を決定
- その後、優先順位に従い、各デバイスの先頭セクタのMBR(ブート用の特殊領域)を読込、得られたブートロダに制御を移す
※ブートローダが得られない場合は、次のデバイスのMBRを読み込む
- 起動デバイスの優先順位はBIOSセットアップ画面で変更可能

・ブートローダ => 記憶装置内のカーネルをロードし、カーネルに生業を移す役割、LinuxシステムではGRUBが該当
---ブートストラップローダ(446バイト)、第1〜4パーティション情報(16バイト)、ブートシグニチャ(2バイト) = 合計：512バイト = パーティションテーブル

・カーネル => 起動後、ハードウェア認識・制御、ルートファイルシステムのマウントなどの初期化処理を行う
カーネルイメージと初期RAMディスクは「/boot」に格納

- ブートローダからカーネルに渡されたパラメータは「/proc/cmdline」ファイルで確認

・init => 最初に起動するプロセス、PIDは1となる。
=> SysVinitシステムは「/sbin/init」が起動
- initプロセス設定ファイル「/etc/inittab」に基づき、アプリレベルの初期化
- Upstart、systemd(初期化処理高速化)システムの場合は「etc/inittab」ファイルは使用されない

・systemd => SysVinitを置き換える新しいinitの仕組み
- systemd: systemdの本体となるプロセス、initの代わりに常駐
- systemd-journald: systemdが制御する各サービスが出力ログ
- systemd-logind: システムへログイン・起動停止・電源ボタン操作を管理
- systemd-udevd: 従来のudevdに代わり、デバイスの動的変更・検出を行う

・systemdで扱う処理はUnitという単位で管理
- Unitは設定ファイル、設定通りにsystemdが処理実行

・各Unitの拡張子と機能
- devise: 各種デバイスを管理
- mount: ファイルシステムのマウント管理
- service: サービス制御
- swap: スワップ領域を管理
- target: 複数のサービスを一つのグループにする
systemdでは「cgroups」というLinuxカーネルのキノにによってプロセスのリソース管理をしている

systemdとUpstartはサービスを並列起動する,だから高速起動・停止可能
システム起動時に実行されるUnitは「/etc/systemd/system/default.target」

・SysVinitのランレベルとsystemdのターゲット
- 0 : poweroff.target
- 1 : rescue.target
- 2,3,4 : multi-user.target
- 5 : graphical.target
- 6 : reboot.target
これらターゲットは「lib/systemd/system」に格納

・各サービスの稼働状況や起動設定を管理するsystemctlコマンド
書式：　　systemctl サブコマンド [Unit名]
- disable: サービスの自動起動を無効
- enable: サービスの自動起動を有効
- get-default: 次回起動時のターゲット表示
- halt: システムを停止しhalt状態にする
- is-active: サービスが稼働しているか表示
- list-unit-files: 全てのUnit定義ファイルを一覧表示
- reboot: システムを再起動
- reload: サービス設定ファイル再読み込み
- restart: サービスを再起動
- set-default: 次回起動時のターゲットを設定
- start: サービスを起動
- status: サービスの状態を表示
- stop: サービスを停止
- poweroff: システムを停止し電源を切断


----------
◆ランレベル/ブートターゲットの変更

・shutdownコマンドのオプション
shutdown[オプション]時間[メッセージ]

-h : システム停止
-r : システム再起動
-k : シャットダウンは行わず、ログイン中の全ユーザーにメッセージを送る
-c : 実行中のシャットダウンをキャンセル
「HH:MM」 HH時MM分に実行
「+M」 M分後に実行
[now] 今すぐ実行

・「ctrl+alt+del」キーで動作するファイル
Sysinitシステム => /etc/inittab


・ランレベル
- 0 : システム停止
- 1/s/S : シングルユーザモード
- 2 : マルチユーザモード(テキストログイン,NFSなし)
- 3 : マルチユーザモード(テキストログイン)
- 4 : 未使用
- 5 : マルチユーザモード(GUIログイン)
- 6 : システム再起動

・現在のランレベル確認コマンド => runlevel
・ランレベルの変更コマンド => init , telinit
・デフォルトランレベル設定(5の場合) => id:5:initdefault: => 「/etc/rc[0-6].d」
・命名規則(例：K01smartd)
- 1文字目: S(Start:サービス起動) , K(Kill: サービス停止)
- 数字: 実行優先順位。若番優先
- サービス名： 任意名
・即座に変更を反映させるオプション => q , Q => init q , telinitQ など

・ACPI => コンピュータの電源管理や構成に関する規格
シャットダウンや再起動の命令はACPIイベントとして通知
acpidデーモンはACPIイベントを監視し、イベントに対応する処理を実行

・wallコマンド => ログイン中全てのユーザにメッセージ送信
centOS7 => wall [-n] [message]
Ubuntu14.04 => wall [file]


〜〜〜Linuxのインストールとパッケージ管理〜〜〜
◆ハードディスクのレイアウト設計
・Linuxシステムを構築する際の必要なパーティション => スワップ領域・ルートパーティション

・パーティション設計の主なディレクトリと分割適否
/home: 一般ユーザのホームディレクトリ(書き込み頻繁) ●
/usr: 起動には不要なプログラムを格納(読み込みが頻繁) ●
/var: ログファイルやメールなど可変ファイル群を格納(書き込みが頻繁)
/opt: 追加でインストールしたパッケージを格納(容量が大きなる可能性) ●
/boot: Linuxカーネルなど起動に必須のファイルを格納 △
/tmp: 一時ファイルを格納 △
/bin: 一般ユーザ用のコマンド格納 ×
/sbin: 管理者用のコマンド格納 ×
/etc: システムの設定ファイルを格納 ×
/lib: 共有ライブラリを格納 ×
/dev: デバイスファイルを格納 ×

・LVM(Logical Volume Manager)
- 物理ボリューム(PV):物理的なハードディスクやパーティション
- ボリュームグループ(VG):物理ボリュームを集めて作る、仮想的な領域
- 論理ボリューム(LV):ボリュームグループの一部又は全部を使って作る、仮想的ななパーティション。論理ボリューム上にファイルシステムを作って利用可能

・論理ボリュームを作成する手順
❶物理ボリューム(PV)の作成 => pvcreateコマンド
❷ボリュームグループ(VG)の作成 => vgcreateコマンド
❸論理ボリューム(LV)の作成 => lvcreate

・論理ボリュームのデバイスファイル => 「/dev/VG名/LV名」
mkfsコマンド => LVを使用する
mountコマンド => 論理ボリュームにファイルシステム作成
スナップショット => 変更前の情報を保持(バックアップ)

----------
◆ブートマネージャのインストール
・Linuxカーネルの起動オプション
init=パス : initの代わりに指定コマンド実行
root=デバイス名 : ルートパーティションを設定
数字(0-6) : 指定したランレベルで起動
quiet : 起動中のカーネルからの情報出力を抑制する

・GRUB => 多くのファイルシステムに対応している高機能なブートローダ
- GRUBシェル: 操作を対話的に行うことができるプログラム
- GURBインストール => grub-installコマンド
- バージョン0.9x系(GRUB Legacy)、1.9以降(GRUB2)
legacy設定ファイル => 「/boot/grub/menu.lst and grub.conf」
GRUB2設定ファイル => 「/boot/grub/grub.cfg」 直接編集はしない

----------
◆共有ライブラリの管理
・ライブラリ => 汎用性の高いプログラムを再利用可能な形にまとめたもの
・共有ライブラリ => 複数のプログラムから参照して使えるようにしたもの
・ダイナミックリンク(動的リンク) => プログラム実行時に共有ライブラリを呼び出すこと
・スタティックリンク(静的リンク) => プログラムのコンパイル時にライブラリの機能を実行ファイル内に埋め込む
・静的ライブラリ => 埋め込みライブラリのこと
・共有ライブラリの場所検索
- 環境変数 LD_LIBRARY_PATH : 共有ライブラリ検索パス指定する
- 「/etc/ld.so.cache」ファイル : バイナリファイル、ldconfigコマンド使用
-- ld.so.confファイルを参照、ls.so.cacheファイルを更新
- 「/lib」と「/usr/lib」ディレクトリ: 一般使用される共有ライブラリ
-- 64ビット版は「/lib64」と「//usr/lib64」

----------
◆Debianパッケージ管理
・パッケージ => 実行ファイル・設定ファイル・ライブラリ・マニュアルが含まれるファイル。インストール・アンインストールが容易にできる
・dpkgツール => 「/etc/dpkg/dpkg.cfg」
- dpkgコマンド
- dpkg-reconfigure => インストール炭のパッケージを再設定

・dpkgコマンドのオプションとアクション
-E : 同バージョンが既にインストールされていればインストールを行わない
-G : 新バージョンが既にインストールされていればインストールを行わない
-R : ディレクトリを再帰的に処理

-i(--install) : パッケージのインストール
-r(--remove) : 設定ファイルを残してアンインストール
-P(--purge) : 設定ファイルも含め完全にアンインストール
-l(--list) : インストール済みパッケージを検索表示
-L(--listfiles) : 指定したパッケージからインストールされたファイルを一覧表示
-s(--status) : インストール済みパッケージの詳細情報表示
-S(--search) : どのパッケージからインストールされたか表示
-C(--audit) : インストールが完了していないパッケージの表示

・APT(Advanced Package Tool)ツール => dpkgを拡張したツール群
=> 設定ファイルは「/etc/apt/sources.list」
・APRツールコマンド
apt-get => インストール・アンインストール
apt-cache => パッケージ情報の検索・参照
apt => apt-get,apt-cacheの機能を統合

・apt-get のサブコマンド
install : パッケージのインストール・アップグレード
remove : パッケージのアンインストール
upgrade : インストール済の全パッケージのアップグレード
dist-upgrade : ディストリビューションを最新版にアップグレード
update : パッケージのデータベースを最新版に更新
clean : 過去に取得したパッケージファイルを削除

・apt-cacheサブコマンド
search キーワード : キーワードを含むパッケージ検索
show パッケージ名 : 指定したパッケージ情報表示
showpkg パッケージ名 : 指定したパッケージの被依存関係を含めた情報表示
depends パッケージ名 : 指定したパッケージが依存しているパッケージの一覧表示

----------
◆RPMとYUMパッケージ管理
・RPMツール => RPM系基本ツール ,「/usr/lib/rpm/rpmrc」が設定ファイル
- rpmコマンド => 基本コマンド
- rpm2cpio => RPM系をcpio形式のアーカイブに変換するコマンド

・YUMツール => RPMツールを拡張したツール群
- 設定ファイル 「etc/yum.conf」
- 取得元(リポジトリ) 「/etc/yum.repos.d」
- yumコマンド

・DNFツール => YUMの後継となるパッケージ管理ツール
FedoraではFedora22からデフォルトツール
yumコマンドとほぼ同じオプションが使用可能

・Zypperツール => openSUSEが採用しているコマンドラインの管理ツール


・rpmコマンド 検査関連オプション
-q(--query) : インストールされているか照会
-V(--verify) : パッケージの検査

・rpmコマンド 検査関連併用オプション
-a(--all) : インストール済みの全パッケージの表示
-l(--list) : 指定パッケージに含まれるファイル表示
-i(--info) : 指定パッケージの詳細情報表示
-f(--file) : 指定ファイルがどのパッケージからインストールされたか表示
-p(--package) : 照会対象をパッケージファイルとする
--changelog : 変更履歴の表示
-c(--configfiles) : 設定ファイルの一覧表示
--nomd5 : MD5によるファイルの改ざんを検査しない
-R(--requires) : 依存するファイルの表示

・rpmコマンド インストール関連オプション
-i(--install) : インストール
-U(--upgrade) : アップグレード(なければインストール)
-F(--freshen) : アップグレード(なければインストールしない)
-e(--erase) : アンインストール

・rpmコマンド インストール関連併用オプション
-v : 詳細情報表示
-h(--hash) : 進行状況を「#」で表示
--test : テスト実施
--nodeps : 依存関係を無視

・yumコマンドのサブコマンド
install : インストール
update : アップデート
remove : アンインストール
info : 詳細情報表示
list :  一覧表示
search : パッケージ検索
check-update : アップデート可能なパッケージの表示
grouplist : パッケージグループの一覧表示
groupinstall : パッケージグループのインストール


・zypperコマンドのサブコマンド
install | in パッケージ名 : インストール
update | up [パッケージ名] : アップデート
remove | rm パッケージ名 : アンインストール
info パッケージ名 : 詳細情報表示
search | se キーワード : パッケージ検索
list-updates | lu [オプション] : アップデート可能なパッケージ表示
repos | lr : リポジトリの一覧表示
refresh : リポジトリの更新

----------
◆仮想化のゲストOSとしてのLinux
・仮想化 => コンピュータリソースを論理的に分割。統合して提供する技術
- サーバ・OS、ストレージ・ネットワークなどがある。

・仮想化の種類
- ハイパーバイザー型 => 物理マシン上で動作するハイパーバイザー上で直接仮想マシンを起動し、ゲストOSを動作させる方式
物理マシンのハードウェアをエミュレート(模倣)する完全仮想化を実現
-- ハイパーバイザー : 仮想化のための専用OS
-- ゲストOS : 仮想マシンにインストールしたOS

-コンテナ型 => OSのリソースをコンテナという単位で隔離して共有する方式
オーバーヘッドは少なく、リソース・構築・管理がシンプル。
コンテナごとのユーザ管理やリソース制限を行う
コンテナ型ソフトウェア => LXC,Docker

・クラウドコンピューティング => サーバ/ストレージ/アプリなどのリソースを全てクラウドに置き、これらをサービスとして利用するコンピューてイング環境
- 仮想化技術により物理的な制約を回避し、迅速・柔軟に必要な時に必要な分だけ利用できるのが特徴

・クラウドのサービスモデル
- SaaS : ソフトウェアサービス、何も気にせず開発できる
- PaaS : ソフトウェア開発、実行環境を提供、環境構築と保守いらず、開発専念
- IaaS : インフラ環境のみ提供、サーバの仮想化技術と関連が深いサービスモデル、HaaSと呼ばれることもある

・仮想マシンの複製 => 個々の仮想マシンの環境設定やハードデイスクはファイルとして保存され、仮想マシンをクローンすることで複製可能。
テンプレート使用や同様のシステム展開が容易にできる
※注意点：
❶ 同様の仮想化ソフトウェア上で複製した仮想マシンのUUIDが重複すると動作しない
❷ホスト名・IPアドレス・SSHホスト鍵など、サーバごとに一意なものの変更が必要
※UUID(汎用一意識別子、重複が起きないように生成される一意の値)
マシンIDは「/etc/machine-id」ファイルに格納


〜〜〜GNUとUnixコマンド〜〜〜
◆コマンドラインのでの作業
・manコマンド => man オプション セクション番号 キーワード
オプション
-k : 部分一致、aproposコマンドと同じ
-f : 完全一致、whatisコマンドと同じ
セクション番号
1 : ユーザーコマンド
2 : システムコール
3 : ライブラリ呼び出し
4 : 特殊ファイル
5 : ファイルの書式と慣習 -> crontab
6 : ゲーム
7 : その他
8 : システム管理コマンド -> shutdown
9 : カーネルルーチン

・環境変数
- HISTFILE : コマンド履歴保存ファイルパス
- HISTSIZE : 現在のシェルでのコマンド履歴の保存数
- HISTFILESIZE : コマンド履歴保存ファイルへの履歴保存数
- HOSTNAME : ホスト名
- HOME : ホームディレクトリ
- LANG : ロケール、言語設定
- PATH : コマンドやプログラムを検索するディレクトリのリスト
- PWD : カレントディレクトリのパス
- USER : ログインユーザ

・メタキャラクタ
* : 0文字以上文字列
? : 任意1文字
[] : 選択系1文字
$ : 変数
' : 文字列とみなす
" : 文字列、$、`、¥、"は除く
` : 文字列をコマンドとし、実行結果を文字列とする
¥ : 次の文字をエスケープ、打ち消す
~ : ホームディレクトリ
. : カレントディレクトリ
.. : カレントディレクトリの1つ上の階層

----------
◆フィルターを使用してのテキスタストリーム処理
・開業コードと代表的なOSの組み合わせ
- CRLF(\r\n) : windows
- LF(\n) : UNIX OS (Linux, Mac OS X など)
- CR(\r) : 古いMacOS(バージョン9)まで
CR => キャリッジリターン
LF => ラインフィード

・tr コマンド => 指定した文字を変換・削除
tr [オプション] [文字列1[文字列2]]
-d : 文字列1で指定した文字を削除
-s : 文字列1で指定した文字が連続した場合、1文字に置き換える
文字列の文字クラス
[:alpha:] : 英字
[:lower:] : 英小文字(a-z)
[:upper:] : 英大文字(A-Z)
[:digit:] : 数字(0-9)
[:alnum:] : 英数字
[:space:] : スペース

・tailコマンド(headの場合は -f がない)
-n 行数|-行数 : 行数を末尾から表示
-c バイト数 : バイス数を末尾から表示
-f : 末尾に追加された行を表示し続ける(リアルタイム表示)

・splitコマンド => 指定した行数でファイルを分割、塊をチャンクと呼ぶ
split [-行数]　| split [-l 行数] , デフォは1000行で分割

・od コマンド => ファイル内容を8・16進数で表示
オプション
-t : 出力フォーマット設定
-o : 8進数2バイト区切り(-t o2と同じ)
-x : 16進数2バイト区切り(-t x2と同じ)
-c : ASCⅡ文字・バックスラッシュ付きエスケープ文字(-t cと同じ)

-tオプションで出力形式を指定
o[SIZE] : 区切るバイト数を指定(未指定で4バイト)->8進数
x[SIZE] : 区切るバイト数を指定(未指定で4バイト)->16進数
c : -cと同じ->ASCⅡ文字

・メッセージダイジェスト(ハッシュ値) => データをハッシュ関数で計算してくれる固定長の値
ダイジェストコマンド
md5sum : MD5
sha256sum : SHA256
sha512sum : SHA512
-c | --check オプションで読み込んだファイルの値と照合できる

・uniqコマンド => 連続して重複していない行のみ表示
-d : 重複している行のみ表示 ---do している！で覚えよ
-u : 重複していない行のみ表示 ---un していない！で覚えよ

・wcコマンド => 文字数や行数を調べる
-l : 行数
-w : 単語数 ---word
-c : バイト数 ---cバイト

・sortコマンド => 並び替え
-b : 行頭空白無視
-f : 大文字・小文字区別しない ---family
-r : 降順 ---逆round
-t 区切り文字 : 指定した文字を区切り文字とする
-n : 数字を文字でなく数値とする
-k フィールド : フィールド指定(デフォは1つ目)

・cutコマンド => 取り出して表示
-c 文字数 : 文字位置指定
-d 区切り文字 : 区切り文字指定(デフォはタブ)
-f フィールド : フィールド指定

・pasteコマンド => 行単位で結合
-d : 区切り文字指定(デフォはタブ)

・nlコマンド => 行番号
-b a : 空行を含めた全ての行(catの -nと同じ)
-b t : 空行を除いた行(catの -bと同じ)デフォルト

・catコマンド => ファイル内容を一度に全て表示

----------
◆基本的なファイル管理
・ファイル圧縮
- gzip形式 , .gz
- bzip2形式 , .bz2 , gzipより圧縮率が高い
- xz形式 , xz , bzip2より圧縮率が高い

・rmコマンド => ファイルやディレクトリを左k図よ
-f : 強制的削除
-i : info削除
-r | -R : 再帰的に削除

・ddコマンド => データコピー、cpコマンド違い、ブロックサイズとコピー回数を指定できる
if=入力ファイル : 入力側ファイル指定
of=出力ファイル : 出力側ファイル指定
bs=バイト数 : ブロックサイズ指定(デフォは512バイト)
count=回数 : コピー回数指定

・xzコマンド => xz形式でファイル圧縮
-d, --decompress : 圧縮ファイルの展開 ,unxzでも良い
-k, --keep : 圧縮・展開処理ごに削除しない
-l, --list : 圧縮ファイル情報表示

・gzipコマンド
-d : 展開 , gunzipでも
-c : 元ファイル残す
-r : 再帰的圧縮

・bzip2コマンド
-d : 展開 , bunzipでも
-c :元ファイル残す

・statコマンド => inode番号やタイムスタンプ詳細表示
・zcatコマンド => gzip形式ファイルを送信
・xzcatコマンド => xz形式ファイルを送信
・bzcatコマンド => bzip2形式ファイルを送信

・tarコマンド => 複数ファイルを1つにアーカイブ、アーカイブの展開
-c : アーカイブ作成
-x : 展開
-t : 一覧表示
-f : ファイル名指定
-v : 処理中の詳細表示
-z : gzip圧縮展開
-j : bzip2圧縮展開
-J : xz圧縮展開

・fileコマンド => ファイル種類表示、アクセス時刻のみ更新

・touchコマンド => ファイル作成
-t 時刻 : アクセス時刻と修正時刻を変更
-a : アクセス時刻変更
-m : 修正時刻変更

・mkdirコマンド => ディレクトリ作成
-m アクセス権 : アクセス権付与作成
-p : 存在しない階層ファイルも同時に作成可能

・rmdirコマンド => 空のディレクトリのみ削除
-p : 階層指定し、親ディレクトリも削除

・cpio形式 => cpio形式のアーカイブ取り扱い
-o : アーカイブ作成
-i : 展開

・lsコマンド => 詳細表示
-a : 隠しファイルも
-A : -aと同じ、っかれんと・親ディレクトリは表示しない
-d : 指定表示
-F : ファイルタイプ表示
-i : inode番号表示
-l : 詳細情報表示
-R :再帰的表示

・cpコマンド => コピー
-f : 上書きできない場合、削除してからコピー
-i : info
-p : ファイル属性を保持してコピー
-r | -R : ディレクトリコピー

----------
◆ストリーム、パイプ、リダイレクトの使用
・ストリーム制御,ファイルディスクリプタ
< : 入力元指定 0< と同じ
<< (ヒアドキュメント) : 入力元指定し、終了文字入力 0<<と同じ
<<< (ヒアストリング) : 指定文字列をコマンドの標準入力に送る
> : 出力先指定 1>と同じ
>> : 出力先指定し、出力再起に追記 1>>と同じ
2> : 標準エラーと出力先指定
2>> : 2>と出力先に追記
>&2 : 出力とエラー出力の出力先を同じにする 1>&2と同じ 標準をエラーへ
2>&1 : >&2と逆のイメージ、エラーを標準へ

・teeコマンド => 標準入力の内容をディスプレイとファイルに出力
・xargsコマンド => 標準入力からの文字列をコマンドの引数として組み立てる

----------
◆プロセスの作成、監視、終了
・killallコマンド => プロセスにシグナルを送り、終了させる
HUP(SIGHUP) 1 ハングアップ(端末の切断による終了)
INT(SIGINT) 2 割り込み終了(Ctrl+Cキーと同じ)
KILL(SIGKILL) 9 クリーンアップせず終了(強制終了)
TERM(SIGTERM) 15 クリーンアップして終了(デフォ)
CONT(SIGCONT) 18 一時停止の再開
STOP(SIGSTOP) 19 一時停止
TSTP(SIGTSTP) 20 端末入力一時停止(Ctrl+Zと同じ)

・psコマンド => 親子関係をツリー状表示
a : 他のユーザのプロセスも表示(Xとの併用で全て表示)
f : 詳細表示
u : 実行ユーザ名も表示
x : 制御端末の無いデーモン等も表示
-e : 全表示
-f : 完全フォーマット表示
-p | p PID : PID指定
-i | I 親プロセスのPIDや実行優先度決定するnice値もあわせて表示

・pgrepコマンド => 特定の名前を持つプロセスIDを検索できる
-u をつけてUIDを指定 rootユーザーはUIDは0

・nohupコマンド => ログアウト後もジョブ実行させる
・fgコマンド => 動作中・一時停止中のジョブをフォアグランド動作に切替・bgコマンド => 一時停止中のジョブをバックグランド動作に切替
・watchコマンド => 一定時間繰り返し実行し結果を表示
-n をつけて秒数指定

・screen,tmux => 仮想端末制御プログラム

----------
◆プロセスの実行優先度の変更
・niceコマンド => 実行優先度設定
nice -n [nice値] or nice [-nice値]
マイナスの値はrootユーザのみ

・reniceコマンド => 既に起動しているnice値を変更する
-u ユーザ名 : 指定したユーザが所有する全てのプロセスのnice値変更
-p PID : 指定したPIDのnice値変更 -pは省略可能

nice値の範囲は-20〜19
-20　=> 優先度高い
19 => 優先度低い

----------
◆正規表現を使用したテキストファイル検索
・正規表現 => 文字列の特定のパターンを認識する為の表現方法
- 特殊文字 : | \ などの特殊文字
- 文字クラス : [ ] 文字集合
- 数量詞 : * + 直前文字の繰返し回数を示す
- アンカー : ^ $ 文字列内での位置を示す

・grepコマンド => 正規表現のパターンにマッチする文字列を含む行を抽出
-c : 行数表示
-f : ファイル読み込み
-i : 大文字小文字区別しなお
-n : 行番号表示
-v : マッチしない行を表示
-E : 拡張正規表現を使用(egrep)
-F : 固定文字列(fgrep)

・sedコマンド => 標準入力内容を編集表示する
-e : 編集コマンドを指定
-f : 編集コマンドを記述したファイル指定
編集コマンド
s/文字列1/文字列2/ : 各業の最初に現れる1を2に変換
s/文字列1/文字列2/g : 全ての1を2置換
/文字列/d : 文字列が含まれる行削除
行番号1,行番号2d : 1から2までの行を削除
y/文字1,2/3.4/ : 文字1を3に、2を4に置換

----------
◆ファイルの基本的な編集
・viコマンド
:q 終了、内容変更されていると終了できない
:q! 強制終了
:w 保存
:w ファイル名　指定ファイル保存
:wq | :x | ZZ 編集保存し終了
:wq! 強制保存し終了、読み取り専用ファイルでも可能、失敗した場合は終了しない
:set nu | number => 行番号表示
:set nonu | nonumber => 行番号非表示
:set ts=タブ幅 | tabstop=タブ幅 => タブ幅を数値指定

yy | Y : 行コピー
yw : 単語コピー
dd : カット
dw : 単語カット
x : 文字カット
X : 左文字カット
p : ペースト、文字・単語は右、行は下
P : ペースト、文字・単語は左。行は上
u : 元に戻す

:r ファイル名 => 指定ファイルの内容をカレント行の後に読み込んで挿入
:!コマンド => viを終了することなく、Linuxコマンドを実行

・コマンドモードから入力モードに移行
i : 左から入力開始
a : 右から入力開始
I : 行の先頭から入力開始
A : 行の末尾から入力開始
o : 下に空白行を挿入し、その行から入力開始
O : 上に空白行を挿入し、その行から入力開始

・文字列の検索コマンド
/文字列 : カーソル位置からファイルの末尾に検索(前方・進行方向)
?文字列 : /文字列の逆(後方・逆方向)
n : 次を検索
N : nの逆方向を検索

・カーソル操作コマンド
h : 左
l : 右
k : 上
j : 下
0 : 行頭
$ : 行末
H : 一番上
L : 一番下
gg : ファイル先頭
G : ファイル最終行
nG|:n : n行目移動
Ctrl+f : 次画面
Ctrl+b : 前画面

・EDITOR => デフォルトで起動するエディタ設定をする環境変数
・Linuxで使用できるテキストエディタ
Emacs : 開発環境として便利な機能、高性能エディタ、拡張機能をカスタマイズでき、GUIもサポートしている
nano : GUIをサポートしていない軽量端末エディタ、画面下部に操作キーや機能が表示され、初心者に優しい
Vim : viから派生した高機能テキストエディタ,操作方法はviと同じ、GUIサポート、viに変わりLinuxで標準使用

〜〜〜　デバイス、Linuxファイルシステム、FHS〜〜〜
◆パーティションとファイルシステムの作成

・ジャーナリングファイルシステム => ジャーナリング機能を持つファイルシステム
・ジャーナリング機能 => 更新履歴をジャーナル(ログ)に記録する機能

・ファイルシステム
ext2 : 以前の使用されていた標準的規格
ext3 : ext2の後継・ジャーナリングファイルシステム
ext4 : 3の後継・ジャーナリングファイルしてステム
XFS : SGI(シリコングラフィクス社)が開発・動的inode・ジャーナリングファイルシステム
JFS : IBMが開発・動的inode・ジャーナリングファイルシステム

・Btrfs(B-tree File System) => 高性能なファイルシステム
- マルチデバイスへの対応
- サブボリューム
- 圧縮

・mkfsコマンド => ファイルシステムを作成
-t 種類 : ファイルシステムの種類を指定
-c : 不良ブロックを検査

mke2fsコマンド
-j : ext3ファイルシステム作成
-t 種類 : 種類指定(ext2/ext3/ext4)
-c : 不良ブロック検査

・exFAT =>USBメモリのようなフラッシュドライブ向けのファイルシステム
- マイクロソフトが開発したプロプライエタリ(私有)なファイルシステム
- 利用にはFUSE(Filesystem in Userspace)が必要
- フラッシュドライブ向け

・パーティションテーブル => ハードディスク全体のパーティション情報
・パーティションの管理方式 => MBRとGPT

・GPT => MBR形式のパーティションテーブルにあった製薬を克服した新しい方式
以下の制約がなくなる「
- 基本パーティション数 : 4 => 最大128まで作成可能
- ハードディスク容量2.2TB(2TiB) => 9.4ZB(8ZiB)
- 起動用システムフォームウェア : BIOS => UEFI

・fdiskコマンド => MBR方式のハードディスクにおけるパーティションの作成・削除・変更・情報表示
fdisk -l デバイス名
- サブコマンド
m : メニュー表示
l : 一覧表示
n : 作成
d : 削除
p : テーブル表示
t : タイプ(システム)IDの変更
w : 保存して終了
q : 保存せず終了

・gdisk => GPT方式のパーティション作成・変更・削除・情報表示する

・partedコマンド => ハードディスクにパーティション作成
1. パーティションテーブルの指定 : (parted) mklabel[パーティションテーブル]
2. パーティションの作成 : (parted)mkpart[パーティションタイプ ファイルシステム種別　パーティション名] 開始位置 終了位置

・スワップ領域 => 物理メモリに入らない時に一時的に格納する為の通常ハードディスク上に作成する領域
- mkswap : スワップを作成
- swapon : スワップを有効に
- swapoff : スワップ領域を無効に

----------
◆ファイルシステムの整合性の維持

・tune2fsコマンド => ext2/3/4パラメータ設定
-c 回数 : システムチェックするまでの最大マウント回数
-i 時間[d|m|w] : システムチェックするまでの最大時間間隔
-j : ext2 -> ext3に変換
-L ラベル名 : ボリュームラベル設定
・ext2/3/4システムでは、全体の5%分の領域がroot用の予約領域として確保
- 但し、システム全体が大きすぎる時は、「tune2fs -m 数字%」 にて変更可能

・fsckコマンド => システムチェツク、問題修復
-t 種類 : システム種類指定
-A : 「/etc/fstab」に記述されている全ファイルに対して実行
-N : 実行内容のみ表示(実行はしない)
-a : 問題を自動的に修復
-r : 問題を対話的に修復

・e2fsckコマンド => システムチェック、問題修復
-y : 全ての問合せに対し、自動的に「yes」と回答
-n : noと回答
-p : 全ての問題を自動的に修復


・duコマンド => ファイルやディレクトリが占める容量確認
-a : ディレクトリ以外にファイルについても表示
-h : 単位を付加して表示(M(メガ)、G(ギガ)など)
-c : 合計容量も同時表示
-s : 指定した部分の合計容量のみ表示
-S : ディレクトリの容量にサブディレクトリの容量を含めず表示
-k : キロバイト単位で表示
-m : メガバイト単位で表示

・dfコマンド => ファイルシステムの空き容量確認
-h : 単位を付加して表示
-k : キロバイト単位
-m : メガバイト単位
-i : inodeの使用状況

・XFSファイルシステム管理コマンド
mkfs.xfs : 作成、「mkfs -t xfs」で呼び出されるコマンド
xfs_info : 情報表示
xfs_db : デバッグ
xfs_check : チェック
csf_fsr : デフラグ
xfs_repair : 検査・修復

----------
◆ファイルシステムのマウントとアンマウント
・ファイルシステムを使用する為には「マウント」が必要
・マウント => OSに認識させ、指定のディレクトリに割り当てる
・アンマウント => ファイルシステムを切り離し、マウント前に戻す事

mount [オプション][デバイス][マウント先]
・mountオプション
-a : 「/etc/fstab」ファイルに記載されているシステム全てマウント(noautoマウントオプションが指定されているものは除く)
-o : 続けてマウントオプションを指定
-t : 続けてファイルシステムを指定(指定しない場合は自動推測)
--bind : mount --bind<dir1><dir2>  ディレクトリ<dir1>を<dir2>にマウント

umount[オプション][デバイスorマウント先]
・umountオプション
-a : 「/etc/mtab」ファイルのシステムを全てアンマウント
-t : 指定したファイルのみアンマウント

・「/etc/fstab」 => マウント設定を行う設定ファイル
1.デバイス名
2.マウントポイント
3.ファイルシステムの種類
4.マウントオプション
5.dumpフラグ
6.fsckフラグ

・lsblk, blkid => デバイスUUID表示できる

・マウントオプション
async : 非同期で入出力
auto : mount -a　でマウント
noauto : mount -aでマウントしない
defaults : デフォルト指定(async,auto,dev,exec,nouser,rw,suid)
exec : バイナリ許可
noexec : バイナリ禁止
ro : 読み取り専用
rw : 読み書き許可
suid : SUIDとSGIDを有効化
user : 一般ユーザでマウント可、本人のみアンマウント可
users : 一般ユーザでマウント可、誰でもアンマウント可
nouser : 一般ユーザマウント禁止

----------
◆ファイルのパーミッションと所有権の管理























