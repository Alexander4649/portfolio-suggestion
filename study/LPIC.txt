LPIC1 学習メモ

〜〜〜システムアーキテクチャ〜〜〜
◆ハードウェア設定の決定と設定

・D-Bus(Desktop Bus) => プログラム同士が情報伝達するプロセス間通信機構
・デバイス =>コールドプラグデバイス・ホットプラグデバイス
-- コールドプラグデバイス => システム停止状態のみデバイスの差し替えが可能、例：ネットワークカード(NIC)
-- ホットプラグデバイス => システム起動時もデバイスの差し替えが可能(プラグアンドプレイデバイスとも言う)、例：USB・PCカード(PCMCIA)・IEEE1394
--- ホットプラグデバイスの制御はudevでおこなれる。
カーネルがデバイス検知すると、/sysの情報更新、この更新をudevが検知し、/devにデバイスファイルを動的に作成。デバイスファイル作成時は/etc/udev/rules.dに配置された設定ファイル[.rules]の情報に基づいておこなれる。

・大容量記憶媒体
- HDD(Hard Disk Drive) => 容量大、コスパ高い、データ記録に磁気、内臓と外付け有り、プラッタ(回転円盤にデータ読み書き)、プラッタが傷つきデータ破損可能性有

・USBフラッシュドライブ(USBメモリ) => フラッシュメモリ(不揮発性の半導体メモリ)にデータ読書き、小型で軽量、フラッシュメモリには書き換え回数・データ保持期間に制限があり、長期保存に向いてない

・SSD(Solid State Drive) => 半導体メモリ、フラッシュメモリ長期保存に向かない、ランダムアクセス性能、省電力・静音・非接触メディアで耐振動・衝撃性高い、HDDの代わりに使用されることもある、
フラッシュメモリの高速性を引き出す為、SATAより高速な「NVMe」インフーフェースで接続するタイプもある

・USBデバイスのデバイスクラス => クラスドライバ・汎用ドライバ
- HID(Human INterface Device): キーボード・マウス・ジョイスティック
- Mass Storage Class: ハードディスク・USBメモリー
- ACM Communication Device Class: モデム・TA(ターミナルアダプタ)
- Audio Class: スピーカー・マイク

・カーネルモジュール => カーネルで扱う独立した部品。モジュールとしてカーネルから切り離すことができ、カーネル本体のサイズを小さくし、必要な機能だけロード、不要な機能はアンロードできる
- modprobe:依存関係を考慮してカーネルモジュールをロード・アンロードするコマンド、設定ファイルは「/etc/modprobe.d」配下の.confファイル(カーネル2.4までは「/etc/modules.conf」)
-- modprobeの設定ファイルの主な設定
--- options: 各カーネルモジュールのデフォルトパラメータ指定
--- alias: カーネルモジュールに別名をつける
--- install: 特定のカーネルモジュールのロード時に実行するコマンド指定
--- remove: 特定のカーネルモジュールのアンロード時に実行するコマンド指定
--- blacklist: ロードしたくないカーネルモジュールを指定

- lsmod: ロードされているカーネルモジュールに関する情報表示コマンド
- lspic: PCIデバイスに関する情報表示コマンド
- lsusb: USBデバイス情報表示コマンド

・/proc => プロセス・ハードウェア、システムリソースを扱う為の仮想的ファイルシステム、システム起動時にメモリ上に作成
- interrupts: IRQ情報
- ioports: I/Oアドレス情報
- bus/pci/devices: PCIデバイス情報
- bus/usb/devices: USBデバイス情報
- meminfo: メモリ情報
- cpuinfo: CPU情報
- dma: 使用中のDMAチャンネル情報
- modules: ロードされているカーネルモジュール情報
- scsi/scsi: SCSIデバイス情報
「/proc」配下格納ファイルの多くはASCIIテキスト形式、catコマンドで確認可能

・ DMA => CPUを介すことなくメインメモリと周辺機器の間で直接情報転送する方式
DMAチャネルはDMAコントローラ(制御装置)に対して情報転送要求する為に使用する通信経路

・PCI => PCIバスに接続されたデバイス、PICデバイスにはネットワークカード(NIC)やSCSIカードなどがある
lspci -v => 詳細表示 (-vv でさらに詳細も可能)
- lspciコマンドの実行結果の情報
❶ PCI識別番号
❷ PCIデバイスの種類
❸ ベンダー名(ベンダーID)
❹ デバイス名
❺ バスの速度(詳細表示のみ)
❻ IRQ番号(詳細表示のみ)
❼ I/Oポートアドレス(詳細表示のみ)

・IRQ => デバイスからCPUへの割り込み要求
・I/Oポートアドレス => デバイスとCPUがデータをやりとりするする際に使用する16ビットアドレス

・BIOS(Basic I/O System) => ハードウェアに近い部分を司るシステム、マザーボード上に書き込まれる。CPに電源を入れるとまずBIOSが起動し、周辺機器を制御する
- CP起動時に(DEL・F2など)で呼び出せるBIOS/UEFIセットアップ画面の設定
-- 日付と時刻
-- 電源管理
-- 起動デバイスの優先順位
-- 組み込みデバイスの有効/無効化

----------
◆システムの起動

・BIOS(Basic Input Output System)が古い場合、HDDを正常に認識できず、小容量になる場合がある。=> BIOSをアップデートすることで問題が解決する
- PC起動後、BIOSが起動、HDDの最低限の認識、起動デバイスの優先順位を決定
- その後、優先順位に従い、各デバイスの先頭セクタのMBR(ブート用の特殊領域)を読込、得られたブートロダに制御を移す
※ブートローダが得られない場合は、次のデバイスのMBRを読み込む
- 起動デバイスの優先順位はBIOSセットアップ画面で変更可能

・ブートローダ => 記憶装置内のカーネルをロードし、カーネルに生業を移す役割、LinuxシステムではGRUBが該当
---ブートストラップローダ(446バイト)、第1〜4パーティション情報(16バイト)、ブートシグニチャ(2バイト) = 合計：512バイト = パーティションテーブル

・カーネル => 起動後、ハードウェア認識・制御、ルートファイルシステムのマウントなどの初期化処理を行う
カーネルイメージと初期RAMディスクは「/boot」に格納

- ブートローダからカーネルに渡されたパラメータは「/proc/cmdline」ファイルで確認

・init => 最初に起動するプロセス、PIDは1となる。
=> SysVinitシステムは「/sbin/init」が起動
- initプロセス設定ファイル「/etc/inittab」に基づき、アプリレベルの初期化
- Upstart、systemd(初期化処理高速化)システムの場合は「etc/inittab」ファイルは使用されない

・systemd => SysVinitを置き換える新しいinitの仕組み
- systemd: systemdの本体となるプロセス、initの代わりに常駐
- systemd-journald: systemdが制御する各サービスが出力ログ
- systemd-logind: システムへログイン・起動停止・電源ボタン操作を管理
- systemd-udevd: 従来のudevdに代わり、デバイスの動的変更・検出を行う

・systemdで扱う処理はUnitという単位で管理
- Unitは設定ファイル、設定通りにsystemdが処理実行

・各Unitの拡張子と機能
- devise: 各種デバイスを管理
- mount: ファイルシステムのマウント管理
- service: サービス制御
- swap: スワップ領域を管理
- target: 複数のサービスを一つのグループにする
systemdでは「cgroups」というLinuxカーネルのキノにによってプロセスのリソース管理をしている

systemdとUpstartはサービスを並列起動する,だから高速起動・停止可能
システム起動時に実行されるUnitは「/etc/systemd/system/default.target」

・SysVinitのランレベルとsystemdのターゲット
- 0 : poweroff.target
- 1 : rescue.target
- 2,3,4 : multi-user.target
- 5 : graphical.target
- 6 : reboot.target
これらターゲットは「lib/systemd/system」に格納

・各サービスの稼働状況や起動設定を管理するsystemctlコマンド
書式：　　systemctl サブコマンド [Unit名]
- disable: サービスの自動起動を無効
- enable: サービスの自動起動を有効
- get-default: 次回起動時のターゲット表示
- halt: システムを停止しhalt状態にする
- is-active: サービスが稼働しているか表示
- list-unit-files: 全てのUnit定義ファイルを一覧表示
- reboot: システムを再起動
- reload: サービス設定ファイル再読み込み
- restart: サービスを再起動
- set-default: 次回起動時のターゲットを設定
- start: サービスを起動
- status: サービスの状態を表示
- stop: サービスを停止
- poweroff: システムを停止し電源を切断


----------
◆ランレベル/ブートターゲットの変更

・shutdownコマンドのオプション
shutdown[オプション]時間[メッセージ]

-h : システム停止
-r : システム再起動
-k : シャットダウンは行わず、ログイン中の全ユーザーにメッセージを送る
-c : 実行中のシャットダウンをキャンセル
「HH:MM」 HH時MM分に実行
「+M」 M分後に実行
[now] 今すぐ実行

・「ctrl+alt+del」キーで動作するファイル
Sysinitシステム => /etc/inittab


・ランレベル
- 0 : システム停止
- 1/s/S : シングルユーザモード
- 2 : マルチユーザモード(テキストログイン,NFSなし)
- 3 : マルチユーザモード(テキストログイン)
- 4 : 未使用
- 5 : マルチユーザモード(GUIログイン)
- 6 : システム再起動

・現在のランレベル確認コマンド => runlevel
・ランレベルの変更コマンド => init , telinit
・デフォルトランレベル設定(5の場合) => id:5:initdefault: => 「/etc/rc[0-6].d」
・命名規則(例：K01smartd)
- 1文字目: S(Start:サービス起動) , K(Kill: サービス停止)
- 数字: 実行優先順位。若番優先
- サービス名： 任意名
・即座に変更を反映させるオプション => q , Q => init q , telinitQ など

・ACPI => コンピュータの電源管理や構成に関する規格
シャットダウンや再起動の命令はACPIイベントとして通知
acpidデーモンはACPIイベントを監視し、イベントに対応する処理を実行

・wallコマンド => ログイン中全てのユーザにメッセージ送信
centOS7 => wall [-n] [message]
Ubuntu14.04 => wall [file]


〜〜〜Linuxのインストールとパッケージ管理〜〜〜
◆ハードディスクのレイアウト設計
・Linuxシステムを構築する際の必要なパーティション => スワップ領域・ルートパーティション

・パーティション設計の主なディレクトリと分割適否
/home: 一般ユーザのホームディレクトリ(書き込み頻繁) ●
/usr: 起動には不要なプログラムを格納(読み込みが頻繁) ●
/var: ログファイルやメールなど可変ファイル群を格納(書き込みが頻繁)
/opt: 追加でインストールしたパッケージを格納(容量が大きなる可能性) ●
/boot: Linuxカーネルなど起動に必須のファイルを格納 △
/tmp: 一時ファイルを格納 △
/bin: 一般ユーザ用のコマンド格納 ×
/sbin: 管理者用のコマンド格納 ×
/etc: システムの設定ファイルを格納 ×
/lib: 共有ライブラリを格納 ×
/dev: デバイスファイルを格納 ×

・LVM(Logical Volume Manager)
- 物理ボリューム(PV):物理的なハードディスクやパーティション
- ボリュームグループ(VG):物理ボリュームを集めて作る、仮想的な領域
- 論理ボリューム(LV):ボリュームグループの一部又は全部を使って作る、仮想的ななパーティション。論理ボリューム上にファイルシステムを作って利用可能

・論理ボリュームを作成する手順
❶物理ボリューム(PV)の作成 => pvcreateコマンド
❷ボリュームグループ(VG)の作成 => vgcreateコマンド
❸論理ボリューム(LV)の作成 => lvcreate

・論理ボリュームのデバイスファイル => 「/dev/VG名/LV名」
mkfsコマンド => LVを使用する
mountコマンド => 論理ボリュームにファイルシステム作成
スナップショット => 変更前の情報を保持(バックアップ)

----------
◆ブートマネージャのインストール










